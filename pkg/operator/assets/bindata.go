// Code generated by go-bindata.
// sources:
// config/01_dns_crd.yaml
// config/01_dns_crd.yaml.original
// config/02_dns_rbac.yaml
// config/03_dns_sa.yaml
// config/04_dns_binding.yaml
// config/05_dns_deployment.yaml
// config/operator-config.yaml
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _config01_dns_crdYaml = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: dnsendpoints.masterdns.operator.openshift.io
spec:
  group: masterdns.operator.openshift.io
  names:
    kind: DNSEndpoint
    plural: dnsendpoints
  scope: Cluster
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          type: object
        spec:
          properties:
            endpoints:
              items:
                properties:
                  dnsName:
                    type: string
                  labels:
                    type: object
                  providerSpecific:
                    type: object
                  recordTTL:
                    format: int64
                    type: integer
                  recordType:
                    type: string
                  targets:
                    items:
                      type: string
                    type: array
                type: object
              type: array
          type: object
        status:
          properties:
            observedGeneration:
              format: int64
              type: integer
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func config01_dns_crdYamlBytes() ([]byte, error) {
	return _config01_dns_crdYaml, nil
}

func config01_dns_crdYaml() (*asset, error) {
	bytes, err := config01_dns_crdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/01_dns_crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _config01_dns_crdYamlOriginal = []byte(`apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: dnsendpoints.masterdns.operator.openshift.io
spec:
  group: masterdns.operator.openshift.io
  names:
    kind: DNSEndpoint
    plural: dnsendpoints
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          type: object
        spec:
          properties:
            endpoints:
              items:
                properties:
                  dnsName:
                    type: string
                  labels:
                    type: object
                  providerSpecific:
                    type: object
                  recordTTL:
                    format: int64
                    type: integer
                  recordType:
                    type: string
                  targets:
                    items:
                      type: string
                    type: array
                type: object
              type: array
          type: object
        status:
          properties:
            observedGeneration:
              format: int64
              type: integer
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
`)

func config01_dns_crdYamlOriginalBytes() ([]byte, error) {
	return _config01_dns_crdYamlOriginal, nil
}

func config01_dns_crdYamlOriginal() (*asset, error) {
	bytes, err := config01_dns_crdYamlOriginalBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/01_dns_crd.yaml.original", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _config02_dns_rbacYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get","watch","list"]
- apiGroups: ["masterdns.operator.openshift.io"]
  resources: ["dnsendpoints"]
  verbs: ["get","list","watch","create","update","patch","delete"]
`)

func config02_dns_rbacYamlBytes() ([]byte, error) {
	return _config02_dns_rbacYaml, nil
}

func config02_dns_rbacYaml() (*asset, error) {
	bytes, err := config02_dns_rbacYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/02_dns_rbac.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _config03_dns_saYaml = []byte(`apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: openshift-master-dns
`)

func config03_dns_saYamlBytes() ([]byte, error) {
	return _config03_dns_saYaml, nil
}

func config03_dns_saYaml() (*asset, error) {
	bytes, err := config03_dns_saYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/03_dns_sa.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _config04_dns_bindingYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: external-dns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
- kind: ServiceAccount
  name: external-dns
  namespace: openshift-master-dns
`)

func config04_dns_bindingYamlBytes() ([]byte, error) {
	return _config04_dns_bindingYaml, nil
}

func config04_dns_bindingYaml() (*asset, error) {
	bytes, err := config04_dns_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/04_dns_binding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _config05_dns_deploymentYaml = []byte(`apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: openshift-master-dns
spec:
  replicas: 1
  selector:
    matchLabels:
      name: external-dns
  template:
    metadata:
      labels:
        name: external-dns
    spec:
      strategy:
        type: Recreate
      serviceAccountName: external-dns
      containers:
      - name: external-dns
        image: quay.io/csrwng/external-dns:latest
        args:
        - --source=crd
        - --crd-source-apiversion=masterdns.operator.openshift.io/v1alpha1
        - --crd-source-kind=DNSEndpoint
        - --registry=noop
        - --policy=upsert-only
`)

func config05_dns_deploymentYamlBytes() ([]byte, error) {
	return _config05_dns_deploymentYaml, nil
}

func config05_dns_deploymentYaml() (*asset, error) {
	bytes, err := config05_dns_deploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/05_dns_deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configOperatorConfigYaml = []byte(`apiVersion: masterdns.operator.openshift.io/v1alpha1
kind: MasterDNSOperatorConfig
metadata:
  name: instance
spec:
  managementState: Managed
  imagePullSpec: quay.io/csrwng/openshift-master-dns:latest
  imagePullPolicy: Always
  version: "4.0"
  logging:
    level: 4
    vmodule: ""
  automaticUpdates: true
`)

func configOperatorConfigYamlBytes() ([]byte, error) {
	return _configOperatorConfigYaml, nil
}

func configOperatorConfigYaml() (*asset, error) {
	bytes, err := configOperatorConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/operator-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/01_dns_crd.yaml":          config01_dns_crdYaml,
	"config/01_dns_crd.yaml.original": config01_dns_crdYamlOriginal,
	"config/02_dns_rbac.yaml":         config02_dns_rbacYaml,
	"config/03_dns_sa.yaml":           config03_dns_saYaml,
	"config/04_dns_binding.yaml":      config04_dns_bindingYaml,
	"config/05_dns_deployment.yaml":   config05_dns_deploymentYaml,
	"config/operator-config.yaml":     configOperatorConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"01_dns_crd.yaml":          {config01_dns_crdYaml, map[string]*bintree{}},
		"01_dns_crd.yaml.original": {config01_dns_crdYamlOriginal, map[string]*bintree{}},
		"02_dns_rbac.yaml":         {config02_dns_rbacYaml, map[string]*bintree{}},
		"03_dns_sa.yaml":           {config03_dns_saYaml, map[string]*bintree{}},
		"04_dns_binding.yaml":      {config04_dns_bindingYaml, map[string]*bintree{}},
		"05_dns_deployment.yaml":   {config05_dns_deploymentYaml, map[string]*bintree{}},
		"operator-config.yaml":     {configOperatorConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
